[{"name":"app.R","content":"library(shiny)\nlibrary(shinydashboard)\nlibrary(dplyr)\noptions(shiny.port = 5539)\noptions(shiny.host = \"0.0.0.0\")\n#options(shiny.maxRequestSize=50*1024^2)\noptions(shiny.usecairo=T)\nlibrary(ggiraph)\n\n# reference: https://rstudio.github.io/shinydashboard/structure.html\ndata <- read.csv(\"~/Downloads/sal_analysis.csv\", sep='\\t', stringsAsFactors=FALSE, header=TRUE)\nunique(data$Serovar)\ndata$Serovar <- gsub(\"\\\\s\",\"\",data$Serovar)\n\n\nui <- dashboardPage(\n  dashboardHeader(title = \"TEST\"),\n  dashboardSidebar(\n    selectInput(\"bacteria\", \"Select a Bacteria\", choices = c(\"Acinetobacter baumannii\", \"Escherichia coli\", \"Klebsiella pneumoniae\")),\n    selectInput(\"filter1\", \"filter1\", choices = c(\"option1\", \"option2\", \"option3\")),\n    selectInput(\"filter2\", \"filter2\", choices = c(\"option1\", \"option2\", \"option3\")),\n    selectInput(\"filter3\", \"filter3\", choices = c(\"option1\", \"option2\", \"option3\"))\n  ),\n  dashboardBody(\n    fluidRow(\n        box(width=12,\n        # A static valueBox\n      valueBox(100, \"genomes\", width=6, color=\"aqua\"),\n      valueBox(100, \"genotypes\", width=6, color=\"aqua\"),\n\n      # Dynamic valueBoxes\n      #valueBoxOutput(\"progressBox\", width=6),\n      )\n      \n    ),\n    fluidRow(\n      # Clicking this will increment the progress amount\n      box(width = 6, ggiraphOutput(\"plot\")),\n      box(width = 6, ggiraphOutput(\"plot1\"))\n    ),\n    \n    fluidRow(\n      # Clicking this will increment the progress amount\n      box(width = 6, ggiraphOutput(\"plot2\")),\n      box(width = 6, ggiraphOutput(\"plot3\"))\n    )\n    #fluidRow(\n    #  # Clicking this will increment the progress amount\n    #  box(width = 12, actionButton(\"count\", \"Increment progress\"))\n    #)\n  )\n)\n\nserver <- function(input, output) {\n  output$progressBox <- renderValueBox({\n    valueBox(\n      paste0(25 + input$count, \"%\"), \"Progress\", icon = icon(\"list\"),\n      color = \"purple\"\n    )\n  })\n\n    output$plot <- renderggiraph({\n      p <- ggplot(data, aes(x=ST, fill=Serovar))+geom_bar_interactive(aes(tooltip = Serovar), position=position_dodge2(width=0.5, preserve=\"single\"))+ theme_minimal()+theme(axis.text.x = element_text(angle = 45, hjust=1, size=8.5), legend.position=\"none\")\n      #x <- girafe(ggobj = p, width_svg = 10, height_svg = 5) %>% girafe_options(opts_hover(css = \"color:cyan;\"))\n      ggiraph(code = print(p))    \n  })\n\n  output$plot1 <- renderggiraph({\n    p1 <- ggplot(data, aes(x=Year, fill=Serovar))+geom_bar_interactive(aes(tooltip = Serovar), position=position_dodge2(width=0.5, preserve=\"single\"))+ theme_minimal()+theme(axis.text.x = element_text(angle = 45, hjust=1, size=8.5), legend.position=\"none\")\n      #x <- girafe(ggobj = p, width_svg = 10, height_svg = 5) %>% girafe_options(opts_hover(css = \"color:cyan;\"))\n      ggiraph(code = print(p1))\n  })\n\n  output$plot2 <- renderggiraph({\n    p1 <- ggplot(data, aes(x=Meropenem..R..19., fill=Serovar))+geom_bar_interactive(aes(tooltip = Serovar), position=position_dodge2(width=0.5, preserve=\"single\"))+ theme_minimal()+theme(axis.text.x = element_text(angle = 45, hjust=1, size=8.5), legend.position=\"none\")\n      #x <- girafe(ggobj = p, width_svg = 10, height_svg = 5) %>% girafe_options(opts_hover(css = \"color:cyan;\"))\n      ggiraph(code = print(p1))\n  })\n\n  output$plot3 <- renderggiraph({\n    p1 <- ggplot(data, aes(x=Gentamicin..R..12., fill=Serovar))+geom_bar_interactive(aes(tooltip = Serovar), position=position_dodge2(width=0.5, preserve=\"single\"))+ theme_minimal()+theme(axis.text.x = element_text(angle = 45, hjust=1, size=8.5), legend.position=\"none\")\n      #x <- girafe(ggobj = p, width_svg = 10, height_svg = 5) %>% girafe_options(opts_hover(css = \"color:cyan;\"))\n      ggiraph(code = print(p1))\n  })\n\n  output$info <- renderPrint({\n    req(input$plot_click)\n    x <- round(input$plot_click$x, 2)\n    y <- round(input$plot_click$y, 2)\n    cat(\"[\", x, \", \", y, \"]\", sep = \"\")\n  })\n}\n\nshinyApp(ui, server)\n\n\n#  shinylive::export(appdir = \"shiny_app\", destdir = \"../testing_shiny_app/docs/\")\n#  httpuv::runStaticServer(\"../testing_shiny_app/docs\", port=5539\n# do not forget to push the code to github","type":"text"}]
